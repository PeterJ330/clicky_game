{"version":3,"sources":["components/Navbar.js","components/Wrapper/Wrapper.js","components/CharacterPics/CharacterPics.js","Game.js","App.js","index.js"],"names":["styles","card","margin","background","score","minHeight","lineHeight","fontSize","color","padding","textAlign","minWidth","float","begin","gameTitle","Navbar","react_default","a","createElement","style","Wrapper","props","className","children","CharacterPics","onClick","characterSelect","id","alt","name","src","image","newArray","userScore","Game","state","characters","randomize","i","length","tempArray","randomIndex","currentIndex","Math","floor","random","updateScore","this","map","character","selected","console","log","concat","_this","alert","setState","_this2","components_Wrapper_Wrapper","components_CharacterPics_CharacterPics","key","Component","App","components_Navbar","src_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"uoEAGMA,EAAS,CACbC,KAAM,CACJC,OAAQ,GACRC,WAAY,WAEdC,MAAO,CACLD,WAAY,UACZE,UAAW,GACXC,WAAY,IACZC,SAAU,SACVC,MAAO,QACPC,QAAS,SACTC,UAAW,SACXC,SAAU,SACVC,MAAO,SAETC,MAAO,CACLV,WAAY,UACZE,UAAW,GACXC,WAAY,IACZC,SAAU,SACVC,MAAO,QACPC,QAAS,SACTC,UAAW,SACXC,SAAU,SACVC,MAAO,SAETE,UAAW,CACTX,WAAY,UACZE,UAAW,GACXC,WAAY,IACZC,SAAU,SACVC,MAAO,QACPC,QAAS,SACTC,UAAW,SACXC,SAAU,WAmBCI,EATA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,EAAOC,MACjBe,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,EAAOI,OAAnB,UARY,EAQZ,iBAPW,EAOX,KACAY,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,EAAOa,OAAnB,4BACAG,EAAAC,EAAAC,cAAA,OAAKC,MAAOnB,EAAOc,WAAnB,oDC/CWM,SAFC,SAAAC,GAAK,OAAIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWD,EAAME,YCO1CC,SAPO,SAAAH,GAAK,OACvBL,EAAAC,EAAAC,cAAA,OACAO,QAAS,kBAAMJ,EAAMK,gBAAgBL,EAAMM,KAC3CL,UAAU,SACVN,EAAAC,EAAAC,cAAA,OAAKU,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,kBCDjCC,EAAW,GACXC,EAAY,EA6EDC,6MAxEXC,MAAQ,CACJC,gBAGJC,UAAY,SAACL,GACT,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IAEjC,IADA,IAAoCE,EAAWC,EAA3CC,EAAeV,EAASO,OACrB,IAAMG,GACTD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAEzCF,EAAYR,EADZU,GAAgB,GAEhBV,EAASU,GAAgBV,EAASS,GAClCT,EAASS,GAAeD,KAKpCM,YAAc,WACVb,EAAY,EACZc,KAAKZ,MAAMC,WAAWY,IAAI,SAAAC,IACK,IAAvBA,EAAUC,WACVjB,GAAuB,KAG/BkB,QAAQC,IAAR,eAAAC,OAA2BpB,OAG/BP,gBAAkB,SAACC,GACfwB,QAAQC,IAAIzB,GACZK,EAAWsB,EAAKnB,MAAMC,WAAWY,IAAI,SAAAC,GAcjC,OAbIA,EAAUtB,KAAOA,KACU,IAAvBsB,EAAUC,UACVK,MAAM,cACNA,MAAK,eAAAF,OAAgBpB,IACrBA,EAAY,EACZqB,EAAKnB,MAAMC,WAAWY,IAAI,SAAAC,GACtBA,EAAUC,UAAW,KAGzBD,EAAUC,UAAW,GAItBD,IAEXK,EAAKE,SAAS,CACVpB,WAAYJ,IAEhBmB,QAAQC,IAAIE,EAAKnB,MAAMC,YACvBkB,EAAKjB,UAAUL,GACfsB,EAAKR,uFAKA,IAAAW,EAAAV,KACL,OACI/B,EAAAC,EAAAC,cAACwC,EAAD,KACKX,KAAKZ,MAAMC,WAAWY,IAAI,SAAAZ,GAAU,OACjCpB,EAAAC,EAAAC,cAACyC,EAAD,CACIjC,gBAAiB+B,EAAK/B,gBACtBC,GAAIS,EAAWT,GACfiC,IAAKxB,EAAWT,GAChBI,MAAOK,EAAWL,MAClBmB,SAAUd,EAAWc,qBAnE1BW,aCCJC,EANH,kBACR9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,cCFRC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6f5f7e8b.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst styles = {\n  card: {\n    margin: 20,\n    background: \"#e8eaf6\"\n  },\n  score: {\n    background: \"#9a74db\",\n    minHeight: 50,\n    lineHeight: 3.5,\n    fontSize: \"1.2rem\",\n    color: \"white\",\n    padding: \"0 20px\",\n    textAlign: \"center\",\n    minWidth: \"33.33%\",\n    float: \"right\"\n  },\n  begin: {\n    background: \"#9a74db\",\n    minHeight: 50,\n    lineHeight: 3.5,\n    fontSize: \"1.2rem\",\n    color: \"white\",\n    padding: \"0 20px\",\n    textAlign: \"center\",\n    minWidth: \"33.33%\",\n    float: \"right\"\n  },\n  gameTitle: {\n    background: \"#9a74db\",\n    minHeight: 50,\n    lineHeight: 3.5,\n    fontSize: \"1.2rem\",\n    color: \"white\",\n    padding: \"0 20px\",\n    textAlign: \"center\",\n    minWidth: \"33.33%\",\n  }\n};\n\nvar userScore = 0 ;\nvar topScore = 0 ;\n\n\n\n\nconst Navbar = () => (\n  <div style={styles.card}>\n    <div style={styles.score}>Score: {userScore} | Top Score: {topScore} </div>\n    <div style={styles.begin}>Click an image to begin!</div>\n    <div style={styles.gameTitle}>Clicky Game</div>\n  </div>\n  \n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./CharacterPics.css\";\n\nconst CharacterPics = props => (\n    <div \n    onClick={() => props.characterSelect(props.id)} \n    className=\"image\">\n    <img alt={props.name} src={props.image}/>\n    </div>\n);\nexport default CharacterPics;","import React, { Component } from \"react\";\n// import Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterPics from \"./components/CharacterPics\";\nimport characters from \"./characters.json\";\n\nvar newArray = []\nvar userScore = 0\n// var topScore = 0\nclass Game extends Component {\n    \n\n    state = {\n        characters,\n    };\n\n    randomize = (newArray) => {\n        for (var i = 0; i < newArray.length; i++) {\n            var currentIndex = newArray.length, tempArray, randomIndex;\n            while (0 !== currentIndex) {\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                tempArray = newArray[currentIndex];\n                newArray[currentIndex] = newArray[randomIndex];\n                newArray[randomIndex] = tempArray;\n            }\n        }\n    };\n\n    updateScore = function(){\n        userScore = 0\n        this.state.characters.map(character => {\n            if (character.selected === true) {\n                userScore = userScore +1;\n            }\n        });\n        console.log(`userScore = ${userScore}`);\n    };\n\n    characterSelect = (id) => {\n        console.log(id);\n        newArray = this.state.characters.map(character => {\n            if (character.id === id) {\n                if (character.selected === true) {\n                    alert(\"Game Over!\");\n                    alert(`Your Score: ${userScore}`)\n                    userScore = 0;\n                    this.state.characters.map(character => {\n                        character.selected = false;\n                    })\n                } else {\n                    character.selected = true;\n                }\n                \n            }\n            return character\n        })\n        this.setState({\n            characters: newArray\n        })\n        console.log(this.state.characters);\n        this.randomize(newArray);\n        this.updateScore();\n    };\n\n   \n\n    render() {\n        return (\n            <Wrapper>\n                {this.state.characters.map(characters => (\n                    <CharacterPics\n                        characterSelect={this.characterSelect}\n                        id={characters.id}\n                        key={characters.id}\n                        image={characters.image}\n                        selected={characters.selected}\n                    />\n                ))}\n            </Wrapper>\n        );\n    }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Game from \"./Game\";\n\nconst App = () => (\n    <div>\n        <Navbar />\n        <Game />\n    </div>\n)\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}